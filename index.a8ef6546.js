(()=>{"use strict";var t={833:(t,e,r)=>{t.exports=r.p+"2410b31921163b25393a.png"},144:(t,e,r)=>{t.exports=r.p+"55fac5ee2e34fbddbe9a.png"}},e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),(()=>{var t=function(t,e){return{type:"message@UPDATE",alias:t,data:e}},e=function(t){return{type:"theme",theme:t}},n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)};function i(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function o(t){return"function"==typeof t}var u=!1,a={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack,u=t},get useDeprecatedSynchronousErrorHandling(){return u}};function s(t){setTimeout((function(){throw t}),0)}var c={closed:!0,next:function(t){},error:function(t){if(a.useDeprecatedSynchronousErrorHandling)throw t;s(t)},complete:function(){}},l=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();function f(t){return null!==t&&"object"==typeof t}var p=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),h=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e;if(!this.closed){var r=this,n=r._parentOrParents,i=r._ctorUnsubscribe,u=r._unsubscribe,a=r._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(var s=0;s<n.length;++s)n[s].remove(this);if(o(u)){i&&(this._unsubscribe=void 0);try{u.call(this)}catch(t){e=t instanceof p?d(t.errors):[t]}}if(l(a)){s=-1;for(var c=a.length;++s<c;){var h=a[s];if(f(h))try{h.unsubscribe()}catch(t){e=e||[],t instanceof p?e=e.concat(d(t.errors)):e.push(t)}}}if(e)throw new p(e)}},t.prototype.add=function(e){var r=e;if(!e)return t.EMPTY;switch(typeof e){case"function":r=new t(e);case"object":if(r===this||r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if(!(r instanceof t)){var n=r;(r=new t)._subscriptions=[n]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=r._parentOrParents;if(null===i)r._parentOrParents=this;else if(i instanceof t){if(i===this)return r;r._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return r;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[r]:o.push(r),r},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var r=e.indexOf(t);-1!==r&&e.splice(r,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function d(t){return t.reduce((function(t,e){return t.concat(e instanceof p?e.errors:e)}),[])}var v=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),y=function(t){function e(r,n,i){var o=t.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=c;break;case 1:if(!r){o.destination=c;break}if("object"==typeof r){r instanceof e?(o.syncErrorThrowable=r.syncErrorThrowable,o.destination=r,r.add(o)):(o.syncErrorThrowable=!0,o.destination=new b(o,r));break}default:o.syncErrorThrowable=!0,o.destination=new b(o,r,n,i)}return o}return i(e,t),e.prototype[v]=function(){return this},e.create=function(t,r,n){var i=new e(t,r,n);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(h),b=function(t){function e(e,r,n,i){var u,a=t.call(this)||this;a._parentSubscriber=e;var s=a;return o(r)?u=r:r&&(u=r.next,n=r.error,i=r.complete,r!==c&&(o((s=Object.create(r)).unsubscribe)&&a.add(s.unsubscribe.bind(s)),s.unsubscribe=a.unsubscribe.bind(a))),a._context=s,a._next=u,a._error=n,a._complete=i,a}return i(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,r=a.useDeprecatedSynchronousErrorHandling;if(this._error)r&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)r?(e.syncErrorValue=t,e.syncErrorThrown=!0):s(t),this.unsubscribe();else{if(this.unsubscribe(),r)throw t;s(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var r=function(){return t._complete.call(t._context)};a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),a.useDeprecatedSynchronousErrorHandling)throw t;s(t)}},e.prototype.__tryOrSetError=function(t,e,r){if(!a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,r)}catch(e){return a.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(s(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(y),m=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function g(t){return t}function x(t){return 0===t.length?g:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var w=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var r=new t;return r.source=this,r.operator=e,r},t.prototype.subscribe=function(t,e,r){var n=this.operator,i=function(t,e,r){if(t){if(t instanceof y)return t;if(t[v])return t[v]()}return t||e||r?new y(t,e,r):new y(c)}(t,e,r);if(n?i.add(n.call(i,this.source)):i.add(this.source||a.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),a.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){a.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),function(t){for(;t;){var e=t,r=e.closed,n=e.destination,i=e.isStopped;if(r||i)return!1;t=n&&n instanceof y?n:null}return!0}(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var r=this;return new(e=_(e))((function(e,n){var i;i=r.subscribe((function(e){try{t(e)}catch(t){n(t),i&&i.unsubscribe()}}),n,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[m]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:x(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=_(t))((function(t,r){var n;e.subscribe((function(t){return n=t}),(function(t){return r(t)}),(function(){return t(n)}))}))},t.create=function(e){return new t(e)},t}();function _(t){if(t||(t=a.Promise||Promise),!t)throw new Error("no Promise impl found");return t}var j=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}(),E=function(t){function e(e,r){var n=t.call(this)||this;return n.subject=e,n.subscriber=r,n.closed=!1,n}return i(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var r=e.indexOf(this.subscriber);-1!==r&&e.splice(r,1)}}},e}(h),T=function(t){function e(e){var r=t.call(this,e)||this;return r.destination=e,r}return i(e,t),e}(y),S=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return i(e,t),e.prototype[v]=function(){return new T(this)},e.prototype.lift=function(t){var e=new O(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new j;if(!this.isStopped)for(var e=this.observers,r=e.length,n=e.slice(),i=0;i<r;i++)n[i].next(t)},e.prototype.error=function(t){if(this.closed)throw new j;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,r=e.length,n=e.slice(),i=0;i<r;i++)n[i].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new j;this.isStopped=!0;for(var t=this.observers,e=t.length,r=t.slice(),n=0;n<e;n++)r[n].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new j;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new j;return this.hasError?(t.error(this.thrownError),h.EMPTY):this.isStopped?(t.complete(),h.EMPTY):(this.observers.push(t),new E(this,t))},e.prototype.asObservable=function(){var t=new w;return t.source=this,t},e.create=function(t,e){return new O(t,e)},e}(w),O=function(t){function e(e,r){var n=t.call(this)||this;return n.destination=e,n.source=r,n}return i(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):h.EMPTY},e}(S),P=function(t){function e(e){var r=t.call(this)||this;return r._value=e,r}return i(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var r=t.prototype._subscribe.call(this,e);return r&&!r.closed&&e.next(this._value),r},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new j;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(S),A=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.notifyNext=function(t,e,r,n,i){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(y),I=function(t){function e(e,r,n){var i=t.call(this)||this;return i.parent=e,i.outerValue=r,i.outerIndex=n,i.index=0,i}return i(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(y),k=function(t){return function(e){for(var r=0,n=t.length;r<n&&!e.closed;r++)e.next(t[r]);e.complete()}};function N(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var D=N(),F=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function M(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var C=function(t){if(t&&"function"==typeof t[m])return n=t,function(t){var e=n[m]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(F(t))return k(t);if(M(t))return r=t,function(t){return r.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,s),t};if(t&&"function"==typeof t[D])return e=t,function(t){for(var r=e[D]();;){var n=void 0;try{n=r.next()}catch(e){return t.error(e),t}if(n.done){t.complete();break}if(t.next(n.value),t.closed)break}return"function"==typeof r.return&&t.add((function(){r.return&&r.return()})),t};var e,r,n,i=f(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+i+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function L(t,e,r,n,i){if(void 0===i&&(i=new I(t,r,n)),!i.closed)return e instanceof w?e.subscribe(i):C(e)(i)}function U(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){var r;"function"==typeof t[t.length-1]&&(r=t.pop());var n=t;return e.lift(new H(n,r))}}var H=function(){function t(t,e){this.observables=t,this.project=e}return t.prototype.call=function(t,e){return e.subscribe(new V(t,this.observables,this.project))},t}(),V=function(t){function e(e,r,n){var i=t.call(this,e)||this;i.observables=r,i.project=n,i.toRespond=[];var o=r.length;i.values=new Array(o);for(var u=0;u<o;u++)i.toRespond.push(u);for(u=0;u<o;u++){var a=r[u];i.add(L(i,a,void 0,u))}return i}return i(e,t),e.prototype.notifyNext=function(t,e,r){this.values[r]=e;var n=this.toRespond;if(n.length>0){var i=n.indexOf(r);-1!==i&&n.splice(i,1)}},e.prototype.notifyComplete=function(){},e.prototype._next=function(t){if(0===this.toRespond.length){var e=[t].concat(this.values);this.project?this._tryProject(e):this.destination.next(e)}},e.prototype._tryProject=function(t){var e;try{e=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(A);function R(t,e){return function(r){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return r.lift(new Y(t,e))}}var Y=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new q(t,this.project,this.thisArg))},t}(),q=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.project=r,i.count=0,i.thisArg=n||i,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(y),W=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.scheduler=e,n.work=r,n.pending=!1,n}return i(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var r=this.id,n=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(n,r,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(n,this.id,e),this},e.prototype.requestAsyncId=function(t,e,r){return void 0===r&&(r=0),setInterval(t.flush.bind(t,this),r)},e.prototype.recycleAsyncId=function(t,e,r){if(void 0===r&&(r=0),null!==r&&this.delay===r&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(t,e);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var r=!1,n=void 0;try{this.work(t)}catch(t){r=!0,n=!!t&&t||new Error(t)}if(r)return this.unsubscribe(),n},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,r=e.actions,n=r.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==n&&r.splice(n,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,r){return t.call(this)||this}return i(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(h)),K=function(){function t(e,r){void 0===r&&(r=t.now),this.SchedulerAction=e,this.now=r}return t.prototype.schedule=function(t,e,r){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(r,e)},t.now=function(){return Date.now()},t}(),z=new(function(t){function e(r,n){void 0===n&&(n=K.now);var i=t.call(this,r,(function(){return e.delegate&&e.delegate!==i?e.delegate.now():n()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return i(e,t),e.prototype.schedule=function(r,n,i){return void 0===n&&(n=0),e.delegate&&e.delegate!==this?e.delegate.schedule(r,n,i):t.prototype.schedule.call(this,r,n,i)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var r;this.active=!0;do{if(r=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,r){for(;t=e.shift();)t.unsubscribe();throw r}}},e}(K))(W);function $(t){var e=t.subscriber,r=t.counter,n=t.period;e.next(r),this.schedule({subscriber:e,counter:r+1,period:n},n)}function X(t){return t&&"function"==typeof t.schedule}function J(t,e){return new w((function(r){var n=new h,i=0;return n.add(e.schedule((function(){i!==t.length?(r.next(t[i++]),r.closed||n.add(this.schedule())):r.complete()}))),n}))}function B(t,e){return e?J(t,e):new w(k(t))}function G(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t[t.length-1];return X(r)?(t.pop(),J(t,r)):B(t)}var Q=new w((function(t){return t.complete()}));var Z=function(t){function e(e){var r=t.call(this)||this;return r.parent=e,r}return i(e,t),e.prototype._next=function(t){this.parent.notifyNext(t)},e.prototype._error=function(t){this.parent.notifyError(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},e}(y),tt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(){this.destination.complete()},e}(y);function et(t,e,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),"function"==typeof e?function(n){return n.pipe(et((function(r,n){return(i=t(r,n),i instanceof w?i:new w(C(i))).pipe(R((function(t,i){return e(r,t,n,i)})));var i}),r))}:("number"==typeof e&&(r=e),function(e){return e.lift(new rt(t,r))})}var rt=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new nt(t,this.project,this.concurrent))},t}(),nt=function(t){function e(e,r,n){void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this,e)||this;return i.project=r,i.concurrent=n,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return i(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,r=this.index++;try{e=this.project(t,r)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e)},e.prototype._innerSub=function(t){var e=new Z(this),r=this.destination;r.add(e);var n=function(t,e){if(!e.closed)return t instanceof w?t.subscribe(e):C(t)(e)}(t,e);n!==e&&r.add(n)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyComplete=function(){var t=this.buffer;this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(tt);function it(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),et(g,t)}var ot=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new ut(t,this.predicate,this.thisArg))},t}(),ut=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.predicate=r,i.thisArg=n,i.count=0,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(y),at=function(){function t(t){this.value=t}return t.prototype.call=function(t,e){return e.subscribe(new st(t,this.value))},t}(),st=function(t){function e(e,r){var n=t.call(this,e)||this;return n.value=r,n}return i(e,t),e.prototype._next=function(t){this.destination.next(this.value)},e}(y),ct=7e3,lt=["dark","light"];function ft(t,e){var r,n,i,o,u,a,s=(n=100,void 0===n&&(n=0),void 0===i&&(i=z),(l(o=n)||!(o-parseFloat(o)+1>=0)||n<0)&&(n=0),i&&"function"==typeof i.schedule||(i=z),new w((function(t){return t.add(i.schedule($,n,{subscriber:t,counter:0,period:n})),t}))).pipe((r={type:"timer"},function(t){return t.lift(new at(r))})),c=s.pipe(U(e),et((function(t){var e=t[1];return e.progress>=ct&&e.index<e.stories.length-1?G({type:"next"}):Q})));return function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=Number.POSITIVE_INFINITY,n=null,i=t[t.length-1];return X(i)?(n=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(r=t.pop())):"number"==typeof i&&(r=t.pop()),null===n&&1===t.length&&t[0]instanceof w?t[0]:it(r)(B(t,n))}(s,c,t.pipe((u="message",a=function(t){return u===t.type},function(t){return t.lift(new ot(a,void 0))}),et((function(t){switch(t.action){case"go-prev":return G({type:"prev"});case"go-next":return G({type:"next"});case"restart":return G({type:"restart"});case"update":return G(function(t){return{type:"update",data:t}}("string"==typeof t.params?JSON.parse(t.params):{}));default:return Q}}))))}function pt(t){for(var e=arguments.length,r=Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];throw Error("[Immer] minified error nr: "+t+(r.length?" "+r.map((function(t){return"'"+t+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function ht(t){return!!t&&!!t[Qt]}function dt(t){return!!t&&(function(t){if(!t||"object"!=typeof t)return!1;var e=Object.getPrototypeOf(t);return!e||e===Object.prototype}(t)||Array.isArray(t)||!!t[Gt]||!!t.constructor[Gt]||gt(t)||xt(t))}function vt(t,e,r){void 0===r&&(r=!1),0===yt(t)?(r?Object.keys:Zt)(t).forEach((function(n){r&&"symbol"==typeof n||e(n,t[n],t)})):t.forEach((function(r,n){return e(n,r,t)}))}function yt(t){var e=t[Qt];return e?e.i>3?e.i-4:e.i:Array.isArray(t)?1:gt(t)?2:xt(t)?3:0}function bt(t,e){return 2===yt(t)?t.has(e):Object.prototype.hasOwnProperty.call(t,e)}function mt(t,e,r){var n=yt(t);2===n?t.set(e,r):3===n?(t.delete(e),t.add(r)):t[e]=r}function gt(t){return $t&&t instanceof Map}function xt(t){return Xt&&t instanceof Set}function wt(t){return t.o||t.t}function _t(t){if(Array.isArray(t))return Array.prototype.slice.call(t);var e=te(t);delete e[Qt];for(var r=Zt(e),n=0;n<r.length;n++){var i=r[n],o=e[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(e[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:t[i]})}return Object.create(Object.getPrototypeOf(t),e)}function jt(t,e){return void 0===e&&(e=!1),Tt(t)||ht(t)||!dt(t)||(yt(t)>1&&(t.set=t.add=t.clear=t.delete=Et),Object.freeze(t),e&&vt(t,(function(t,e){return jt(e,!0)}),!0)),t}function Et(){pt(2)}function Tt(t){return null==t||"object"!=typeof t||Object.isFrozen(t)}function St(t){var e=ee[t];return e||pt(18,t),e}function Ot(){return Kt}function Pt(t,e){e&&(St("Patches"),t.u=[],t.s=[],t.v=e)}function At(t){It(t),t.p.forEach(Nt),t.p=null}function It(t){t===Kt&&(Kt=t.l)}function kt(t){return Kt={p:[],l:Kt,h:t,m:!0,_:0}}function Nt(t){var e=t[Qt];0===e.i||1===e.i?e.j():e.g=!0}function Dt(t,e){e._=e.p.length;var r=e.p[0],n=void 0!==t&&t!==r;return e.h.O||St("ES5").S(e,t,n),n?(r[Qt].P&&(At(e),pt(4)),dt(t)&&(t=Ft(e,t),e.l||Ct(e,t)),e.u&&St("Patches").M(r[Qt],t,e.u,e.s)):t=Ft(e,r,[]),At(e),e.u&&e.v(e.u,e.s),t!==Bt?t:void 0}function Ft(t,e,r){if(Tt(e))return e;var n=e[Qt];if(!n)return vt(e,(function(i,o){return Mt(t,n,e,i,o,r)}),!0),e;if(n.A!==t)return e;if(!n.P)return Ct(t,n.t,!0),n.t;if(!n.I){n.I=!0,n.A._--;var i=4===n.i||5===n.i?n.o=_t(n.k):n.o;vt(3===n.i?new Set(i):i,(function(e,o){return Mt(t,n,i,e,o,r)})),Ct(t,i,!1),r&&t.u&&St("Patches").R(n,r,t.u,t.s)}return n.o}function Mt(t,e,r,n,i,o){if(ht(i)){var u=Ft(t,i,o&&e&&3!==e.i&&!bt(e.D,n)?o.concat(n):void 0);if(mt(r,n,u),!ht(u))return;t.m=!1}if(dt(i)&&!Tt(i)){if(!t.h.N&&t._<1)return;Ft(t,i),e&&e.A.l||Ct(t,i)}}function Ct(t,e,r){void 0===r&&(r=!1),t.h.N&&t.m&&jt(e,r)}function Lt(t,e){var r=t[Qt];return(r?wt(r):t)[e]}function Ut(t,e){if(e in t)for(var r=Object.getPrototypeOf(t);r;){var n=Object.getOwnPropertyDescriptor(r,e);if(n)return n;r=Object.getPrototypeOf(r)}}function Ht(t){t.P||(t.P=!0,t.l&&Ht(t.l))}function Vt(t){t.o||(t.o=_t(t.t))}function Rt(t,e,r){var n=gt(e)?St("MapSet").T(e,r):xt(e)?St("MapSet").F(e,r):t.O?function(t,e){var r=Array.isArray(t),n={i:r?1:0,A:e?e.A:Ot(),P:!1,I:!1,D:{},l:e,t,k:null,o:null,j:null,C:!1},i=n,o=re;r&&(i=[n],o=ne);var u=Proxy.revocable(i,o),a=u.revoke,s=u.proxy;return n.k=s,n.j=a,s}(e,r):St("ES5").J(e,r);return(r?r.A:Ot()).p.push(n),n}function Yt(t){return ht(t)||pt(22,t),function t(e){if(!dt(e))return e;var r,n=e[Qt],i=yt(e);if(n){if(!n.P&&(n.i<4||!St("ES5").K(n)))return n.t;n.I=!0,r=qt(e,i),n.I=!1}else r=qt(e,i);return vt(r,(function(e,i){n&&function(t,e){return 2===yt(t)?t.get(e):t[e]}(n.t,e)===i||mt(r,e,t(i))})),3===i?new Set(r):r}(t)}function qt(t,e){switch(e){case 2:return new Map(t);case 3:return Array.from(t)}return _t(t)}var Wt,Kt,zt="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),$t="undefined"!=typeof Map,Xt="undefined"!=typeof Set,Jt="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,Bt=zt?Symbol.for("immer-nothing"):((Wt={})["immer-nothing"]=!0,Wt),Gt=zt?Symbol.for("immer-draftable"):"__$immer_draftable",Qt=zt?Symbol.for("immer-state"):"__$immer_state",Zt=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:Object.getOwnPropertyNames),te=Object.getOwnPropertyDescriptors||function(t){var e={};return Zt(t).forEach((function(r){e[r]=Object.getOwnPropertyDescriptor(t,r)})),e},ee={},re={get:function(t,e){if(e===Qt)return t;var r=wt(t);if(!bt(r,e))return function(t,e,r){var n,i=Ut(e,r);return i?"value"in i?i.value:null===(n=i.get)||void 0===n?void 0:n.call(t.k):void 0}(t,r,e);var n=r[e];return t.I||!dt(n)?n:n===Lt(t.t,e)?(Vt(t),t.o[e]=Rt(t.A.h,n,t)):n},has:function(t,e){return e in wt(t)},ownKeys:function(t){return Reflect.ownKeys(wt(t))},set:function(t,e,r){var n=Ut(wt(t),e);if(null==n?void 0:n.set)return n.set.call(t.k,r),!0;if(!t.P){var i=Lt(wt(t),e),o=null==i?void 0:i[Qt];if(o&&o.t===r)return t.o[e]=r,t.D[e]=!1,!0;if(function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}(r,i)&&(void 0!==r||bt(t.t,e)))return!0;Vt(t),Ht(t)}return t.o[e]=r,t.D[e]=!0,!0},deleteProperty:function(t,e){return void 0!==Lt(t.t,e)||e in t.t?(t.D[e]=!1,Vt(t),Ht(t)):delete t.D[e],t.o&&delete t.o[e],!0},getOwnPropertyDescriptor:function(t,e){var r=wt(t),n=Reflect.getOwnPropertyDescriptor(r,e);return n?{writable:!0,configurable:1!==t.i||"length"!==e,enumerable:n.enumerable,value:r[e]}:n},defineProperty:function(){pt(11)},getPrototypeOf:function(t){return Object.getPrototypeOf(t.t)},setPrototypeOf:function(){pt(12)}},ne={};vt(re,(function(t,e){ne[t]=function(){return arguments[0]=arguments[0][0],e.apply(this,arguments)}})),ne.deleteProperty=function(t,e){return re.deleteProperty.call(this,t[0],e)},ne.set=function(t,e,r){return re.set.call(this,t[0],e,r,t[0])};var ie=new(function(){function t(t){this.O=Jt,this.N=!0,"boolean"==typeof(null==t?void 0:t.useProxies)&&this.setUseProxies(t.useProxies),"boolean"==typeof(null==t?void 0:t.autoFreeze)&&this.setAutoFreeze(t.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var e=t.prototype;return e.produce=function(t,e,r){if("function"==typeof t&&"function"!=typeof e){var n=e;e=t;var i=this;return function(t){var r=this;void 0===t&&(t=n);for(var o=arguments.length,u=Array(o>1?o-1:0),a=1;a<o;a++)u[a-1]=arguments[a];return i.produce(t,(function(t){var n;return(n=e).call.apply(n,[r,t].concat(u))}))}}var o;if("function"!=typeof e&&pt(6),void 0!==r&&"function"!=typeof r&&pt(7),dt(t)){var u=kt(this),a=Rt(this,t,void 0),s=!0;try{o=e(a),s=!1}finally{s?At(u):It(u)}return"undefined"!=typeof Promise&&o instanceof Promise?o.then((function(t){return Pt(u,r),Dt(t,u)}),(function(t){throw At(u),t})):(Pt(u,r),Dt(o,u))}if(!t||"object"!=typeof t){if((o=e(t))===Bt)return;return void 0===o&&(o=t),this.N&&jt(o,!0),o}pt(21,t)},e.produceWithPatches=function(t,e){var r,n,i=this;return"function"==typeof t?function(e){for(var r=arguments.length,n=Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return i.produceWithPatches(e,(function(e){return t.apply(void 0,[e].concat(n))}))}:[this.produce(t,e,(function(t,e){r=t,n=e})),r,n]},e.createDraft=function(t){dt(t)||pt(8),ht(t)&&(t=Yt(t));var e=kt(this),r=Rt(this,t,void 0);return r[Qt].C=!0,It(e),r},e.finishDraft=function(t,e){var r=(t&&t[Qt]).A;return Pt(r,e),Dt(void 0,r)},e.setAutoFreeze=function(t){this.N=t},e.setUseProxies=function(t){t&&!Jt&&pt(20),this.O=t},e.applyPatches=function(t,e){var r;for(r=e.length-1;r>=0;r--){var n=e[r];if(0===n.path.length&&"replace"===n.op){t=n.value;break}}var i=St("Patches").$;return ht(t)?i(t,e):this.produce(t,(function(t){return i(t,e.slice(r+1))}))},t}()),oe=ie.produce;ie.produceWithPatches.bind(ie),ie.setAutoFreeze.bind(ie),ie.setUseProxies.bind(ie),ie.applyPatches.bind(ie),ie.createDraft.bind(ie),ie.finishDraft.bind(ie);var ue=oe((function(t,e){switch(e.type){case"timer":t.pause||(t.progress+=100);break;case"prev":t.pause=!1,t.progress=0,t.index=Math.max(t.index-1,0);break;case"next":t.index+1<t.stories.length?(t.index+=1,t.progress=0):(t.progress=ct,t.pause=!0);break;case"restart":t.pause=!1,t.progress=0,t.index=0;break;case"update":var r=e.data.alias,n=e.data.data;r&&(t.stories[t.index].alias=r),n&&Object.assign(t.stories[t.index].data,n);break;case"theme":t.theme=e.theme}})),ae=function(){return(ae=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},se={theme:"dark",index:0,progress:0,pause:!1,stories:[]};function ce(t,e){return function(r){return r.lift(new le(t,e))}}var le=function(){function t(t,e){this.compare=t,this.keySelector=e}return t.prototype.call=function(t,e){return e.subscribe(new fe(t,this.compare,this.keySelector))},t}(),fe=function(t){function e(e,r,n){var i=t.call(this,e)||this;return i.keySelector=n,i.hasKey=!1,"function"==typeof r&&(i.compare=r),i}return i(e,t),e.prototype.compare=function(t,e){return t===e},e.prototype._next=function(t){var e;try{var r=this.keySelector;e=r?r(t):t}catch(t){return this.destination.error(t)}var n=!1;if(this.hasKey)try{n=(0,this.compare)(this.key,e)}catch(t){return this.destination.error(t)}else this.hasKey=!0;n||(this.key=e,this.destination.next(t))},e}(y),pe=r(833),he=r(144),de=function(t,e){t.style.transform="scaleX("+e.toFixed(5)+")"},ve=function(t,e){t&&t.contentWindow&&t.contentWindow.postMessage(e,"*")},ye=[{alias:"leaders",data:{title:"Больше всего коммитов",subtitle:"Спринт № 213",emoji:"👑",users:[{id:3,name:"Дарья Ковалева",avatar:"3.jpg",valueText:"32"},{id:9,name:"Сергей Бережной",avatar:"9.jpg",valueText:"27"},{id:7,name:"Дмитрий Андриянов",avatar:"7.jpg",valueText:"22"},{id:6,name:"Андрей Мокроусов",avatar:"6.jpg",valueText:"20"},{id:8,name:"Александр Иванков",avatar:"8.jpg",valueText:"19"}]}},{alias:"leaders",data:{title:"Самый большой коммит",subtitle:"Спринт № 213",emoji:"😮",users:[{id:12,name:"Алексей Ярошевич",avatar:"12.jpg",valueText:"4001 строка"},{id:5,name:"Александр Николаичев",avatar:"5.jpg",valueText:"3845 строк"},{id:8,name:"Александр Иванков",avatar:"8.jpg",valueText:"3640 строк"},{id:10,name:"Яна Берникова",avatar:"10.jpg",valueText:"3453 строки"},{id:4,name:"Вадим Пацев",avatar:"4.jpg",valueText:"2852 строки"}]}},{alias:"vote",data:{title:"Самый 🔎 внимательный разработчик",subtitle:"Спринт № 213",emoji:"🔎",selectedUserId:4,users:[{id:1,name:"Евгений Дементьев",avatar:"1.jpg",valueText:"22 голоса"},{id:4,name:"Вадим Пацев",avatar:"4.jpg",valueText:"19 голосов"},{id:10,name:"Яна Берникова",avatar:"10.jpg",valueText:"17 голосов"},{id:12,name:"Алексей Ярошевич",avatar:"12.jpg",valueText:"16 голосов"},{id:11,name:"Юрий Фролов",avatar:"11.jpg",valueText:"11 голосов"},{id:2,name:"Александр Шлейко",avatar:"2.jpg",valueText:"10 голосов"},{id:5,name:"Александр Николаичев",avatar:"5.jpg",valueText:"9 голосов"},{id:6,name:"Андрей Мокроусов",avatar:"6.jpg",valueText:"8 голосов"},{id:8,name:"Александр Иванков",avatar:"8.jpg",valueText:"7 голосов"},{id:7,name:"Дмитрий Андриянов",avatar:"7.jpg",valueText:"6 голосов"},{id:3,name:"Дарья Ковалева",avatar:"3.jpg",valueText:"5 голосов"},{id:9,name:"Сергей Бережной",avatar:"9.jpg",valueText:"4 голоса"}]}},{alias:"leaders",data:{title:"Самый 🔎 внимательный разработчик",subtitle:"Спринт № 213",emoji:"🔎",selectedUserId:11,users:[{id:1,name:"Евгений Дементьев",avatar:"1.jpg",valueText:"22 голоса"},{id:4,name:"Вадим Пацев",avatar:"4.jpg",valueText:"19 голосов"},{id:10,name:"Яна Берникова",avatar:"10.jpg",valueText:"17 голосов"},{id:12,name:"Алексей Ярошевич",avatar:"12.jpg",valueText:"16 голосов"},{id:11,name:"Юрий Фролов",avatar:"11.jpg",valueText:"15 голосов"},{id:2,name:"Александр Шлейко",avatar:"2.jpg",valueText:"14 голосов"},{id:5,name:"Александр Николаичев",avatar:"5.jpg",valueText:"12 голосов"},{id:6,name:"Андрей Мокроусов",avatar:"6.jpg",valueText:"9 голосов"},{id:8,name:"Александр Иванков",avatar:"8.jpg",valueText:"8 голосов"},{id:7,name:"Дмитрий Андриянов",avatar:"7.jpg",valueText:"6 голосов"},{id:3,name:"Дарья Ковалева",avatar:"3.jpg",valueText:"5 голосов"},{id:9,name:"Сергей Бережной",avatar:"9.jpg",valueText:"4 голоса"}]}},{alias:"vote",data:{title:"Самый 👪 командный разработчик",subtitle:"Спринт № 213",emoji:"👪",offset:8,users:[{id:2,name:"Александр Шлейко",avatar:"2.jpg",valueText:"24 голоса"},{id:3,name:"Дарья Ковалева",avatar:"3.jpg",valueText:"21 голос"},{id:6,name:"Андрей Мокроусов",avatar:"6.jpg",valueText:"19 голосов"},{id:7,name:"Дмитрий Андриянов",avatar:"7.jpg",valueText:"18 голосов"},{id:1,name:"Евгений Дементьев",avatar:"1.jpg",valueText:"16 голосов"},{id:9,name:"Сергей Бережной",avatar:"9.jpg",valueText:"14 голосов"},{id:8,name:"Александр Иванков",avatar:"8.jpg",valueText:"13 голосов"},{id:11,name:"Юрий Фролов",avatar:"11.jpg",valueText:"11 голосов"},{id:10,name:"Яна Берникова",avatar:"10.jpg",valueText:"9 голосов"},{id:12,name:"Алексей Ярошевич",avatar:"12.jpg",valueText:"7 голосов"},{id:5,name:"Александр Николаичев",avatar:"5.jpg",valueText:"6 голосов"},{id:4,name:"Вадим Пацев",avatar:"4.jpg",valueText:"5 голосов"}]}},{alias:"leaders",data:{title:"Самый 👪 командный разработчик",subtitle:"Спринт № 213",emoji:"👪",selectedUserId:6,users:[{id:2,name:"Александр Шлейко",avatar:"2.jpg",valueText:"24 голоса"},{id:3,name:"Дарья Ковалева",avatar:"3.jpg",valueText:"21 голос"},{id:6,name:"Андрей Мокроусов",avatar:"6.jpg",valueText:"19 голосов"},{id:7,name:"Дмитрий Андриянов",avatar:"7.jpg",valueText:"18 голосов"},{id:1,name:"Евгений Дементьев",avatar:"1.jpg",valueText:"16 голосов"},{id:9,name:"Сергей Бережной",avatar:"9.jpg",valueText:"14 голосов"},{id:8,name:"Александр Иванков",avatar:"8.jpg",valueText:"13 голосов"},{id:11,name:"Юрий Фролов",avatar:"11.jpg",valueText:"11 голосов"},{id:10,name:"Яна Берникова",avatar:"10.jpg",valueText:"9 голосов"},{id:12,name:"Алексей Ярошевич",avatar:"12.jpg",valueText:"7 голосов"},{id:5,name:"Александр Николаичев",avatar:"5.jpg",valueText:"6 голосов"},{id:4,name:"Вадим Пацев",avatar:"4.jpg",valueText:"5 голосов"}]}},{alias:"chart",data:{title:"Коммиты",subtitle:"Спринт № 213",values:[{title:"203",value:108},{title:"204",value:160},{title:"205",value:126},{title:"206",value:134},{title:"207",value:112},{title:"208",value:152},{title:"209",value:128},{title:"210",value:164},{title:"211",value:118},{title:"212",value:140},{title:"213",value:182,active:!0},{title:"214",value:0},{title:"215",value:0},{title:"216",value:0},{title:"217",value:0},{title:"218",value:0}],users:[{id:3,name:"Дарья Ковалева",avatar:"3.jpg",valueText:"32"},{id:9,name:"Сергей Бережной",avatar:"9.jpg",valueText:"27"},{id:7,name:"Дмитрий Андриянов",avatar:"7.jpg",valueText:"22"}]}},{alias:"chart",data:{title:"Строки кода",subtitle:"Спринт № 213",values:[{title:"203",value:47798},{title:"204",value:68590},{title:"205",value:55472},{title:"206",value:63073},{title:"207",value:51917},{title:"208",value:65852},{title:"209",value:60693},{title:"210",value:70631},{title:"211",value:57299},{title:"212",value:62839},{title:"213",value:74156,active:!0},{title:"214",value:0},{title:"215",value:0},{title:"216",value:0},{title:"217",value:0},{title:"218",value:0}],users:[{id:12,name:"Алексей Ярошевич",avatar:"12.jpg",valueText:"8739"},{id:8,name:"Александр Иванков",avatar:"8.jpg",valueText:"7538"},{id:10,name:"Яна Берникова",avatar:"10.jpg",valueText:"6845"}]}},{alias:"diagram",data:{title:"Размер коммитов",subtitle:"Спринт № 213",totalText:"182 коммита",differenceText:"+42 с прошлого спринта",categories:[{title:"> 1001 строки",valueText:"30 коммитов",differenceText:"+8 коммитов"},{title:"501 — 1000 строк",valueText:"32 коммита",differenceText:"+6 коммитов"},{title:"101 — 500 строк",valueText:"58 коммитов",differenceText:"+16 коммитов"},{title:"1 — 100 строк",valueText:"62 коммита",differenceText:"+12 коммитов"}]}},{alias:"activity",data:{title:"Коммиты, 1 неделя",subtitle:"Спринт № 213",data:{mon:[0,0,0,0,1,0,0,0,0,0,2,3,2,1,0,1,0,0,0,0,0,0,0,0],tue:[0,0,0,0,1,0,0,0,0,5,0,4,0,0,0,0,1,0,3,0,0,2,1,0],wed:[1,0,0,0,1,0,5,0,0,4,0,0,0,5,0,2,1,0,0,0,0,0,0,1],thu:[0,1,0,1,0,0,0,0,6,0,1,0,0,1,0,0,5,0,0,0,1,0,0,0],fri:[0,0,0,0,0,0,0,1,3,0,0,5,0,4,0,0,3,0,0,0,0,1,0,0],sat:[0,0,0,0,2,1,0,0,1,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0],sun:[0,0,0,0,0,0,0,1,0,0,0,0,3,1,0,0,0,0,0,0,1,0,0,0]}}},{alias:"activity",data:{title:"Коммиты, 2 неделя",subtitle:"Спринт № 213",data:{mon:[0,1,1,1,0,0,0,0,0,4,0,0,2,0,0,0,0,1,0,0,0,2,0,2],tue:[0,1,2,1,0,0,0,0,1,1,0,0,0,0,5,0,0,0,0,0,0,0,0,0],wed:[0,0,0,0,2,0,1,2,0,3,0,0,0,0,0,0,0,0,0,3,1,1,0,0],thu:[0,0,2,0,0,0,0,1,2,0,0,0,0,0,1,2,0,3,0,1,1,0,0,0],fri:[0,0,0,1,1,0,2,0,4,0,0,0,2,0,3,2,0,0,0,0,1,1,0,1],sat:[1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,0,0,0,2,2,0,2,0,0],sun:[0,0,0,0,2,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1]}}}],be=function(t){var e=new S,r=new P(ae(ae({},se),{stories:t}));return ft(e,r).subscribe(e),e.pipe(U(r),R((function(t){var e=t[0],r=t[1];return ue(r,e)}))).subscribe(r),[function(t){return e.next(t)},r]}(ye),me=be[0],ge=be[1];function xe(t){var e=t.data;"message@ACTION"===e.type&&me({type:"message",action:e.action,params:e.params})}var we=document.querySelector(".player"),_e=ye.map((function(e){var r,n,i,o=e.alias,u=e.data;if(we)return r=we,n=function(e){if(!e.contentWindow)throw new Error("Error: iframe did not load");ve(e,t(o,u)),e.contentWindow.addEventListener("message",xe)},(i=document.createElement("iframe")).classList.add("frame"),i.src="frame.html",i.sandbox.add("allow-scripts"),i.sandbox.add("allow-same-origin"),i.addEventListener("load",(function(){return n(i)})),r.appendChild(i),i;throw new Error("Error: .player did not find")})),je=document.querySelector(".progress-container"),Ee=ye.map((function(){if(je)return function(t){var e=document.createElement("div");e.classList.add("slide-progress");var r=document.createElement("div");return r.classList.add("slide-progress-value"),e.appendChild(r),t.appendChild(e),r}(je);throw new Error("Error: .progress-container did not find")}));(function(t){return t.pipe(R((function(t){return{index:t.index,value:t.progress/ct}})),ce())})(ge).subscribe((function(t){var e=t.index,r=t.value;return de(Ee[e],r)})),function(t){return t.pipe(R((function(t){return t.index})),ce())}(ge).subscribe((function(t){if(!we)throw new Error("Error: .player did not find");we.style.transform="translateX(-"+100*t+"%)",Ee.forEach((function(e,r){return de(e,r<t?1:0)}))})),function(t){return t.pipe(R((function(t){var e=t.index;return{index:e,value:t.stories[e]}})),ce((function(t,e){return t.index===e.index&&t.value===e.value})))}(ge).subscribe((function(e){var r=e.index,n=e.value,i=n.alias,o=n.data;ve(_e[r],t(i,o))})),function(t){return t.pipe(R((function(t){return t.theme})),ce())}(ge).subscribe((function(t){!function(t,e){for(var r=0;r<lt.length;r+=1){var n="theme_"+lt[r];t.classList.contains(n)&&t.classList.remove(n)}t.classList.add("theme_"+e)}(document.body,t),function(t){var e=document.querySelector("link[rel='icon']");e instanceof HTMLLinkElement&&("dark"===t?e.href=pe:"light"===t&&(e.href=he))}(t),_e.forEach((function(e){return ve(e,function(t){return{type:"message@SET_THEME",theme:t}}(t))}))}));var Te=document.querySelector(".set-light");if(!Te)throw new Error("Error: .set-light did not find");Te.addEventListener("click",(function(){return me(e("light"))}));var Se=document.querySelector(".set-dark");if(!Se)throw new Error("Error: .set-dark did not find");Se.addEventListener("click",(function(){return me(e("dark"))}));var Oe=document.querySelector(".prev");if(!Oe)throw new Error("Error: .prev did not find");Oe.addEventListener("click",(function(){return me({type:"prev"})}));var Pe=document.querySelector(".next");if(!Pe)throw new Error("Error: .next did not find");Pe.addEventListener("click",(function(){return me({type:"next"})}));var Ae=document.querySelector(".restart");if(!Ae)throw new Error("Error: .restart did not find");Ae.addEventListener("click",(function(){return me({type:"restart"})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,